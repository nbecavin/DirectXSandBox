	#include "sh_const.h"

	//
	// Line Integrals SSAO
	//

	// Sampling offsets and weights for filter kernels
	//const float4 gPostProcess[16]			: register(c0);		// This constant is to be used and shared by all post process shaders
	//const float3 gSampleOffsetWeight[16]	: register(c16);	// xy <=> offset, z <=> weight
	cbuffer cb_postprocess : register(b10)
	{
		float4		gPostProcess[16];
		float4		gSampleOffsetWeight[16];
	};

	Texture2D sAdaptedLuminance;
	Texture2D t0 : register(t0); SamplerState s0 : register(s0);
	Texture2D t1 : register(t1); SamplerState s1 : register(s1);
	Texture2D t2 : register(t2); SamplerState s2 : register(s2);
	Texture2D t3 : register(t3); SamplerState s3 : register(s3);
	Texture2D t4 : register(t4); SamplerState s4 : register(s4);
	Texture2D t5 : register(t5); SamplerState s5 : register(s5);
	Texture2D t6 : register(t6); SamplerState s6 : register(s6);
		
	float4 ph_ambientocclusion_linearzbuf(const float4 vPos : VPOS) : SV_Target
	{
		float storedZ = texDepth2D( t0, s0, vPos * gPostProcess[0].xy );
		float4 storedPos = float4( 0.f, 0.f, storedZ, 1.f);
		float4 storedViewPos = Mul(storedPos, invProjMatrix);
		float linearZ = storedViewPos.z/storedViewPos.w;
		#if 1 //def _EDITION_Z
			linearZ = -linearZ;
		#endif
		return linearZ;
	/*	
		float A = texDepth2D( t0, s0, (vPos + float2(0.25,0.25)) * gPostProcess[0].xy );
		float B = texDepth2D( t0, s0, (vPos + float2(0.75,0.25)) * gPostProcess[0].xy );
		float C = texDepth2D( t0, s0, (vPos + float2(0.25,0.75)) * gPostProcess[0].xy );
		float D = texDepth2D( t0, s0, (vPos + float2(0.75,0.75)) * gPostProcess[0].xy );
		
		float storedZAvg = (A+B+C+D)*0.25;			//réduit l'aliasing et le z fight
		float storedZMax = max(A,max(B,max(C,D)));	//réduit les contours
		float storedZ = lerp(storedZAvg, storedZMax, 1.f);

		float4 storedPos = float4( 0.f, 0.f, storedZ, 1.f);
		float4 storedViewPos = Mul(storedPos, gInvProjMatrix);
		float linearZ = storedViewPos.z/storedViewPos.w;
		#ifdef _EDITION_Z
			linearZ = -linearZ;
		#endif
		return linearZ;
	*/
	}
	
	#define NUM_RADII 2
	
	/*
	static float g_ssaoRadius1 = 0.03f;
	static float g_ssaoDepth1 = 0.15f;
	static float g_ssaoRadius2 = g_ssaoRadius1*3.0f;
	static float g_ssaoDepth2 = g_ssaoDepth1*3.f;
    */
    // SSAO params
	static float g_ssaoRadiusMax1 = 0.05f;
	static float g_ssaoRadiusMax2 = 0.15f;
   	#define g_ssao			gPostProcess[1].w
	#define g_ssaoRadius1	gPostProcess[3].x
	#define g_ssaoRadius2	gPostProcess[3].y
	#define g_ssaoDepth1	gPostProcess[3].z
	#define g_ssaoDepth2	gPostProcess[3].w
	
	#define PATTERN		1
	#define NUM_PAIRS	4

	//pos.x, pos.y, width(depth), weight(volume)
#if PATTERN==1
	//A         celui qu’on a
	static const float centerWeight = 0.0936639;
	static const float4 sphereSamplePoints[NUM_PAIRS] =
	{
					float4(0.333333, 0.0, 0.942809, 0.125701),
					float4(0.353553, -0.353553, 0.866026, 0.129645),
					float4(0.0, -0.666666, 0.745356, 0.110423),
					float4(-0.589255, -0.589255, 0.552772, 0.0873988),
	};
#endif
#if PATTERN==2
	//B         même distances entre les rayons
	static const float centerWeight = 0.067887;
	static const float4 sphereSamplePoints[NUM_PAIRS] =
	{
					float4(0.193185, -0.0517638, 0.979796, 0.118797),
					float4(0.299756, -0.264852, 0.916515, 0.124492),
					float4(0.241787, -0.549126, 0.8, 0.100824),
					float4(-0.220452, -0.769026, 0.6, 0.121943),
	};
#endif
#if PATTERN==3
	//C         bien dispérsés sur le disc / volumes proches, mais 3 samples à rayons très proches
	static const float centerWeight = 0.115262;
	static const float4 sphereSamplePoints[NUM_PAIRS] =
	{
					float4(0.291507, -0.208837, 0.933494, 0.112559),
					float4(-0.301994, -0.620294, 0.723903, 0.118414),
					float4(0.368598, -0.610842, 0.700719, 0.103272),
					float4(-0.702509, -0.23234, 0.67268, 0.108124),
	};
#endif
#if PATTERN==4
	static const float centerWeight = 0.032242;
	static const float4 sphereSamplePoints[NUM_PAIRS] =
	{
		float4(0.333333, 0.0, 0.942809, 0.0478171),
		float4(0.353553, -0.353553, 0.866026, 0.0757041),
		float4(0.0, -0.666666, 0.745356, 0.0811178),
		float4(-0.589255, -0.589255, 0.552772, 0.0512846),
		float4(0.117155, -0.129369, 0.984651, 0.0321004),
		float4(-0.0819763, -0.372956, 0.924221, 0.0619293),
		float4(-0.550826, -0.208382, 0.808188, 0.0688779),
		float4(-0.695459, 0.240743, 0.677038, 0.0650479),
	};
#endif

	float4 ph_ambientocclusion(in float4 vPos : VPOS) : SV_Target
	{
		float2 uvScreen = (vPos/*+0.5*/) * gPostProcess[0].xy;
		float2 uvSinCos = (vPos/*+0.5*/) * gPostProcess[1].xy; // invSinCosMapSize;
   
		float2 sinCos = float2(1.f,0.f);//tex2D(s1, uvSinCos).xy * 2.0 - 1.0;//générer la texture en -1 1
		float2x2 rotation =
		{
			float2(sinCos.y, sinCos.x),
			float2(-sinCos.x, sinCos.y)
		};
		
		float depth = t0.Sample(s0, uvScreen).x;

		float occlusionAmount = 0.5 * centerWeight;

		float2 occlusionAmounts = float2(occlusionAmount, occlusionAmount);
		float radii[NUM_RADII] = {g_ssaoRadius1, g_ssaoRadius2};
		float maxDistances[NUM_RADII] = {g_ssaoDepth1, g_ssaoDepth2};
		float radiiMax[NUM_RADII] = {g_ssaoRadiusMax1, g_ssaoRadiusMax2};
		for (int i=0; i<NUM_RADII; i++)
		{
			// Radius get smaller the further away it is
			float radius = radii[i] / depth;
			// Avoid too large radius (for performance reason)
			radius = min(radius, radiiMax[i]);
			// Take samples!
			for (int j=0; j<NUM_PAIRS; j++)
			{
				// Each pair of sample points is made by reflection
				float3 samplePoint = sphereSamplePoints[j].xyz;
				samplePoint.xy = Mul(samplePoint.xy, rotation);
				samplePoint.x *= gPostProcess[1].z; // invAspectRatio;
				samplePoint *= radius;
				float sampleWidth = samplePoint.z;
				
				// Sample pair of points
				float2 uvSample1 = min( uvScreen + samplePoint.xy, gPostProcess[2].xy );
				float depthSample1 = t0.Sample(s0, uvSample1).x;
				float2 uvSample2 = min( uvScreen - samplePoint.xy, gPostProcess[2].xy );
				float depthSample2 = t0.Sample(s0, uvSample2).x;
				
				// How much of the sphere do the samples occlude...
				float2 depthSamples = float2(depthSample1, depthSample2);
				float2 depthDifferences = depth.xx - depthSamples;
				float2 occlusionContributions = saturate((depthDifferences / sampleWidth.xx) + 0.5);
				
				// We want to modify the occlusion by distance
				// so that objects don't occlude other objects after a certain distance.
				float2 distanceModifiers = saturate((maxDistances[i].xx - depthDifferences) / maxDistances[i]);
				// If the occluder is too far in front to be useful, try to use the other samples inverted occlusion
				// (Since this is a good approximation of flat surfaces)
				// If that is too far in front to be useful, just default to 0.5
				float2 modifiedContributions = lerp
				(
					//la 1ère valeur corespond à l'occlusion si les 2 samples sont invalides. Défaut à 0.5
					lerp(0.5, 1.0 - occlusionContributions.yx, distanceModifiers.yx),
					occlusionContributions.xy,
					distanceModifiers.xy
				);
				// Weight the contribution
				modifiedContributions *= sphereSamplePoints[j].w ;
				// Add them to our total
				occlusionAmounts[i] += modifiedContributions.x + modifiedContributions.y;
			}
		}
		
		// We don't want anything below 0.5, and we want to normalize to [0,1]
		occlusionAmounts = saturate( (occlusionAmounts-0.5f) * 2.f );
		occlusionAmount = saturate( occlusionAmounts.x + occlusionAmounts.y );
		return float4(saturate(1-occlusionAmount.xxx*g_ssao),1);
	}
	
	//
	// 5x5 cross bilateral filter.
	
	static float g_ssaoBlurRadius = g_ssaoRadius1 * 0.5f;
	static float g_ssaoBlurDepth = g_ssaoDepth1 * 0.1f;
	
	float4 ph_ambientocclusionblur(in float2 vScreenPosition : TEXCOORD0) : SV_Target
	{
		float2 uv = vScreenPosition;
		static const int nSample = 5;
		
		// Get center point
		float depth	 = t1.Sample(s1, uv);
		float center = t0.Sample(s0, uv);
		
		float totalWeight = gSampleOffsetWeight[2].z;
		float sum = gSampleOffsetWeight[2].z*center;
		float idepth = 1.f/(depth*g_ssaoBlurDepth);
		
		// 1st half
		for (int i=0; i<2; i++)
		{
			float2 uv2 = uv + gSampleOffsetWeight[i].xy;
			float2 uv3 = uv + gSampleOffsetWeight[nSample+i].xy;
			uv2 = min( uv2, gPostProcess[2].xy );
			uv3 = min( uv3, gPostProcess[2].xy );
			
			float zWeight = (depth - t1.Sample(s1, uv3)); //abs viré = pas de contours blancs
			zWeight = 1.0 - saturate(zWeight*idepth);
			
			float weight = gSampleOffsetWeight[i].z * zWeight;
			totalWeight += weight;
			sum +=  t0.Sample(s0, uv2) * weight;
		}
		
		// 2nd half
		for (int i=3; i<5; i++)
		{
			float2 uv2 = uv + gSampleOffsetWeight[i].xy;
			float2 uv3 = uv + gSampleOffsetWeight[nSample+i].xy;
			uv2 = min( uv2, gPostProcess[2].xy );
			uv3 = min( uv3, gPostProcess[2].xy );
						
			float zWeight = (depth - t1.Sample(s1, uv3)); //abs viré = pas de contours blancs
			zWeight = 1.0 - saturate(zWeight*idepth);
			
			float weight = gSampleOffsetWeight[i].z * zWeight;
			totalWeight += weight;
			sum +=  t0.Sample(s0, uv2) * weight;
		}

		return sum / totalWeight;
	}
